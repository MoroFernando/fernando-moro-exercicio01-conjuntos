# Fernando Moro

''' ENUNCIADO 
Para  obter  os  pontos  relativos  a  este  trabalho,  voc√™  dever√°  criar  um  programa,  utilizando  a 
linguagem  Python, C, ou C++.  Este  programa,  quando  executado,  ir√°  apresentar  os  resultados  de 
opera√ß√µes que ser√£o realizadas entre dois conjuntos de dados.  
O  programa  que  voc√™  desenvolver√°  ir√°  receber  como  entrada um arquivo de texto  (.txt) 
contendo v√°rios conjuntos de dados e v√°rias opera√ß√µes. Estas opera√ß√µes e dados estar√£o representadas 
em um arquivo de textos contendo apenas os dados referentes as opera√ß√µes que devem ser realizadas 
segundo a seguinte regra fixa: a primeira linha do arquivo de texto de entrada conter√° o n√∫mero de 
opera√ß√µes  que  est√£o  descritas  no  arquivo,  este  n√∫mero  de  opera√ß√µes  ser√°  um  inteiro;  as  linhas 
seguintes  seguir√£o  sempre  o  mesmo  padr√£o  de  tr√™s  linhas:  a  primeira  linha  apresenta  o  c√≥digo  da 
opera√ß√£o  (U para uni√£o, I para interse√ß√£o, D para diferen√ßa e C produto cartesiano),  a  segunda  e 
terceira linhas conter√£o os elementos dos conjuntos separados por virgulas. A seguir est√° um exemplo 
das linhas que podem existir em um arquivo de testes para o programa que voc√™ ir√° desenvolver: 
4 
U 
3, 5, 67, 7 
1, 2, 3, 4  
I 
1, 2, 3, 4, 5 
4, 5 
D 
1, A, C, 34 
A, C, D, 23 
C 
3, 4, 5, 5, A, B, R 
1, B, C, D, 1 
Neste exemplo temos 4 opera√ß√µes uma uni√£o (U), uma interse√ß√£o (I), um diferen√ßa (D) e um 
produto cartesiano (C). A uni√£o, definida por U, dever√° ser executada sobre os conjuntos {ùüë,ùüì,ùüîùüï,ùüï} e 
{ùüè,ùüê,ùüë,ùüí}, cujos elementos est√£o explicitados nas linhas posteriores a defini√ß√£o da oper√ß√£o (U).  
A resposta do seu programa dever√° conter a opera√ß√£o realizada, descrita por extenso, os dados 
dos conjuntos identificados, e o resultado da opera√ß√£o. No caso da uni√£o a linha de sa√≠da dever√° conter 
a informa√ß√£o e a formata√ß√£o mostrada a seguir:    
Uni√£o: conjunto 1 {3,5,67,7}, conjunto 2 {1,2,3,4}. Resultado: {3,5,67,7,1,2,4}   
Seu programa dever√° mostrar a sa√≠da no terminal, ou em um arquivo de textos. Em qualquer 
um dos casos, a sa√≠da ser√° composta por uma linha de sa√≠da para cada opera√ß√£o constante no arquivo 
de  textos  de  entrada  formatada  segundo  o  exemplo  de  sa√≠da  acima.  Observe  as  letras  mai√∫sculas  e 
min√∫sculas, e os pontos utilizados na formata√ß√£o da linha de sa√≠da apresenta acima.  
No  caso  do  texto  de  exemplo,  teremos  4  linhas,  e  apenas  4  linhas  de  sa√≠da,  formatadas  e 
pontuadas conforme o exemplo de sa√≠da acima. O uso de linhas extras na sa√≠da, ou erros de formata√ß√£o, 
implicam em perda de pontos como pode ser visto na rubrica de avalia√ß√£o constante neste documento. 
Para que seu programa possa ser testado voc√™ deve criar, no m√≠nimo, tr√™s arquivos de entrada 
contendo um n√∫mero diferente de opera√ß√µes, opera√ß√µes com dados diferentes, e opera√ß√µes em ordem diferentes.  Os  arquivos  de  entrada  criados  para  os  seus  testes  devem  estar  dispon√≠veis  tanto  no 
ambiente repl.it quanto no ambiente Github.  
Observe que o professor ir√° testar seu programa com os arquivos de testes que voc√™ criar e com, 
no m√≠nimo um arquivo de testes criado pelo pr√≥prio professor.  '''

def formata√ß√£o_da_lista(conjunto:list):
    conj = []
    num = 0
    num_str = str(num) # Var para poder concatenar os n√∫meros maiores que uma casa decimal

    for elemento in conjunto:

        if elemento.isnumeric():
            num_str += str(elemento)
            num = int(num_str)

        elif elemento.isalpha():
            conj.append(elemento) 
            num = None

        elif elemento == "," and num != None:
            conj.append(num) 
            num = 0
            num_str = str(num)
  
    # Como a condi√ß√£o de fazer o append dos n√∫meros era chegar na v√≠rgula, foi preciso criar uma forma de fazer o append do ultimo elemento do conjunto caso seja num√©rico.
    if elemento.isnumeric():
        conj.append(num)

    return conj

def uniao (conj_x:list, conj_y:list):
    conj_resposta = conj_x

    for elemento in conj_y:
        if elemento not in conj_x:
            conj_resposta.append(elemento)
    
    return conj_resposta

def intersecao (conj_x,conj_y):
    conj_resposta = []

    for elemento in conj_y:
        if elemento in conj_x:
            conj_resposta.append(elemento)

    return conj_resposta

def diferenca (conj_x,conj_y):
    conj_resposta = []

    for elemento in conj_x:
        if elemento not in conj_y:
            conj_resposta.append(elemento)

    for elemento in conj_y:
        if elemento not in conj_x:
            conj_resposta.append(elemento)

    return conj_resposta

def produto_cartesiano (conj_x,conj_y):
    conj_resposta = []

    for elemento_x in conj_x:
        for elemento_y in conj_y:
            p_cartesiano = (f"({str(elemento_x)},{str(elemento_y)})")
            conj_resposta.append(p_cartesiano)

    return conj_resposta

with open("operacoes.txt","r") as arquivo:

    entrada_txt = arquivo.read().splitlines()
    numero_de_operacoes = entrada_txt[0]

    contador_linha = 0
    for linha in entrada_txt:

        if contador_linha == 1:
            tipo_operacao = linha

        elif contador_linha == 2:
            conj1_resposta = formata√ß√£o_da_lista(linha)
            conj1 = formata√ß√£o_da_lista(linha)

        elif contador_linha == 3:
            conj2 = formata√ß√£o_da_lista(linha)

            if tipo_operacao == "U":
                tipo_operacao = "Uni√£o"
                conj_resposta = uniao(conj1,conj2)
                
            elif tipo_operacao == "I":
                tipo_operacao = "Interse√ß√£o"
                conj_resposta = intersecao(conj1,conj2)

            elif tipo_operacao == "D":
                tipo_operacao = "Diferen√ßa"
                conj_resposta = diferenca(conj1,conj2)
            
            elif tipo_operacao == "C":
                tipo_operacao = "Produto Cartesiano"
                conj_resposta = produto_cartesiano(conj1,conj2)

            print(f"\n{tipo_operacao}: conjunto 1 {(conj1_resposta)}, conjunto 2 {(conj2)}. Resultado: {(conj_resposta)}")
            contador_linha = 0

        contador_linha += 1

    print(" ")
